employee <- data.frame(id, name, job_title)
library(tidyverse)
separate(employee, name, into=c('first_name', 'last_name'), sep=" ")
employee <- data.frame(id, name, job_title)
id <- c(1:10)
name <- c("John Mendes", "Rob Stewart", "Rachel Abrahamson", "Christy Hickman", "Johnson Harper", "Candace Miller", "Carlson Landy", "Pansy Jordan", "Darius Berry", "Claudia Garcia")
job_title <- c("Professional", "Programmer", "Management", "Clerical", "Developer", "Programmer", "Management", "Clerical", "Developer", "Programmer")
employee <- data.frame(id, name, job_title)
print(employee)
separate(employee, name, into=c('first_name', 'last_name'), sep=" ")
install.packages(“ggplot2”)
install.packages("ggplot2")
install.packages("palmerpenguins")
library(ggplot2)
library(palmerpenguins)
data("penguins")
View(penguins)
ggplot(data = penguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
read.csv("GPW3_GRUMP_SummaryInformation_2010")
read.csv("GPW3_GRUMP_SummaryInformation_2010.csv")
read.csv("C:\Users\Yan Feng Liu\OneDrive - Rensselaer Polytechnic Institute\Fall 23\Data Analytics\Lab\GPW3_GRUMP_SummaryInformation_2010.csv")
read.csv("C\Users\Yan Feng Liu\OneDrive - Rensselaer Polytechnic Institute\Fall 23\Data Analytics\Lab\GPW3_GRUMP_SummaryInformation_2010.csv")
read.csv("C\OneDrive - Rensselaer Polytechnic Institute\Fall 23\Data Analytics\Lab\GPW3_GRUMP_SummaryInformation_2010.csv")
read.csv("GPW3_GRUMP_SummaryInformation_2010.csv")
EPI_data <- read.csv(”<path>/2010EPI_data.csv")
EPI_data <- read.csv(”<path>/2010EPI_data.csv")
EPI_data <- read.csv("<path>/2010EPI_data.csv")
#other data
GRUMP_data <- read.csv("<path>/GPW3_GRUMP_SummaryInformation_2010.csv")
EPI_data <- read.csv("EPI_data2010.csv")
help(setwd)
EPI_data <- read.csv("EPI_data2010.csv")
EPI_data <- read.csv("/EPI_data2010.csv")
EPI_data <- read.csv("<path>/EPI_data2010.csv")
EPI_data <- read.csv("<path>/EPI_data2010.csv")
EPI_data <- read.csv("<path>/EPI_data2010.csv")
2010
#or
#EPI_data <- read.xlsx(”<path>/2010EPI_data.xlsx")
# Note: replace default data frame name – cannot start with numbers!
View(EPI_data)
#other data
GRUMP_data <- read.csv("<path>/GPW3_GRUMP_SummaryInformation_2010.csv")
EPI_data <- read.csv("C:\Users\Yan Feng Liu\OneDrive - Rensselaer Polytechnic Institute\Fall 23\Data Analytics\Lab\Lab1/EPI_data2010.csv")
EPI_data <- read.csv("\Users\Yan Feng Liu\OneDrive - Rensselaer Polytechnic Institute\Fall 23\Data Analytics\Lab\Lab1/EPI_data2010.csv")
EPI_data <- read.csv("<path>/EPI_data2010.csv")
#EPI_data <- read.csv("<path>/EPI_data2010.csv")
#or
EPI_data <- read.xlsx("<path>/EPI_data2010.xlsx")
install.packages("XLS")
# Note: replace default data frame name – cannot start with numbers!
View(EPI_data)
#
attach(EPI_data) 	# sets the ‘default’ object
EPI_data
install.packages("xlsx")
#EPI_data <- read.csv("<path>/EPI_data2010.csv")
#or
EPI_data <- read.xlsx("<path>/EPI_data2010.xlsx")
#EPI_data <- read.csv("<path>/EPI_data2010.csv")
#or
EPI_data <- read.xls("<path>/EPI_data2010.xls")
library(XLS)
library(xlsx)
library(xlsx)
install.packages("xlsx")
#EPI_data <- read.csv("<path>/EPI_data2010.csv")
#or
EPI_data <- read.xlsx("<path>/EPI_data2010.xlsx")
library(xlsx)
library(xlsx)
library(xlsxjars)
install.packages("xlsx")
install.packages("xlsx")
install.packages("xlsx")
mtcars
head(mtcars)
str(mtcars)
model1 <- lm(mpg ~ cyl + wt, data = mtcars)
model1
help("cooks.distance")
plot(model1, pch = 18, col = 'red', which = c(4)
plot(model1, pch = 18, col = 'red', which = c(4))
help("cooks.distance")
plot(model1, pch = 18, col = 'red', which = c(4))
cooks.distance(model1)
CooksDistance <- cooks.distance(model1)
round(CooksDistance, 5)
sort(round(CooksDistance, 5))
library(ISLR)
head(Hitters)
dim(Hitters)
is.na(Hitters)
# remove NA
HittersData <- na.omit(Hitters)
dim(HittersData)
knitr::opts_chunk$set(echo = TRUE)
glimpse(HittersData)
help(glimpse)
??glimpse
library(dplyr)
glimpse(HittersData)
head(HittersData)
SalaryPredictModel1 <- lm(Salary ~., data = HittersData)
summary(SalaryPredictModel1)
cooksD <- cooks.distance(SalaryPredictModel1)
influential <- cooksD[(cooksD > (3 * mean(cooksD, na.rm = TRUE)))]
influential
names_of_influential <- names(influential)
names_of_influential
Hitters_Without_Outliers <- HittersData %>% anti_join(outliers)
outliers <- HittersData[names_of_influential, ]
Hitters_Without_Outliers <- HittersData %>% anti_join(outliers)
SalaryPredictModel2 <- lm(Salary ~. , data = Hitters_Without_Outliers)
summary(SalaryPredictModel2)
help("rnorm")
set.seed(10)
data1 <- rnorm(50)
set.seed(30)
data2 <- rnorm(50)
# Shaprio-Wilk Normality Test
help("shaprio.test")
??sharprio.text
??sharprio.test
??shaprio.test
??shapiro.test
library(stats)
# Shaprio-Wilk Normality Test
help("shapiro.test")
shapiro.test(data1)
hist(data1, col = 'green')
shapiro.test(data2)
hist(data2, col = 'steelblue')
set.seed(0)
data <- rnorm(100)
shapiro.test(data)
help("rpois")
data <- rpois(n=100, lambda = 3)
shapiro.test(data)
hist(data, col = 'yellow')
help("ad.test")
??ad.test
library(nortest)
help("ad.test")
set.seed(1)
x <- rnorm(100, 0, 1)
ad.test(x)
help('runif')
x <- runif(100, 0, 1)
ad.test(x)
library(gcookbook)
install.packages("ggplot2")
library(gcookbook)
install.packages(c("ggplot2", "gcookbook", "MASS", "dplyr"))
library(gcookbook)
ggplot(BOD, aes(x=Time, y=demand)) + geom_line
ggplot(BOD, aes(x=Time, y=demand)) + geom_line()
??ggplot
library(ggplot2)
ggplot(BOD, aes(x=Time, y=demand)) + geom_line()
BOD
BOD1 <- BOD
BOD$Time <- factor(BOD1$Time)
ggplot(BOD1, aes(x=Time, y=demand, group=1)) + geom_line()
ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + ylim(0, max(BOD$demand))
ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + expand_limits(y=0)
ggplot(BOD, aes(x=Time, y=demand)) + geom_line() + geom_point()
library(gcookbook)
ggplot(worldpop, aes(x=Year, y=Population)) + geom_line() + geom_point() + scale_y_log10()
install.packages("randomForest")
data("iris")
head(iris)
irisdata1 <- iris[,1:4]
irisdata1
head(irisdata1)
help("princamp")
??princomp
#stat
library(stats)
help("princamp")
principal_components <- princomp(irisdata1, cor = TRUE, score = TRUE)
summary(principal_components)
plot(principal_components)
plot(principal_components, type = 'l')
help('biplot')
biplot(principal_components)
setwd("C:/Users/Yan Feng Liu/OneDrive - Rensselaer Polytechnic Institute/Fall 23/Data Analytics/DataAnalytics2023_liuy63/group3_scripts")
setwd("C:/Users/Yan Feng Liu/OneDrive - Rensselaer Polytechnic Institute/Fall 23/Data Analytics/DataAnalytics2023_liuy63/Lab08")
# PCA with iris dataset
data("iris")
head(iris)
# creating another dataset from iris dataset that contains the columns from 1 to 4
irisdata1 <- iris[,1:4]
irisdata1
head(irisdata1)
principal_components <- princomp(irisdata1, cor = TRUE, score = TRUE)
summary(principal_components)
# in the summary you can see that it has four Principal Components it is
# becasue the input data has four different features.
# using the plot() function, we can plot the principal components.
plot(principal_components)
# plotting the principal_components using the a line in plot() functions
plot(principal_components, type = "l")
# using rhw biplot() function we can plot the components
biplot(principal_components)
# There are 13 variables in the dataset such as Alcohol, Malic Acid, Ash, Alkalinity of Ash, Magnesium, ...
wine_data <- read.table("http://archive.ics.uci.edu/ml/machinelearning-databases/wine/wine.data", sep = ",")
# There are 13 variables in the dataset such as Alcohol, Malic Acid, Ash, Alkalinity of Ash, Magnesium, ...
wine_data <- read.table("https://archive.ics.uci.edu/dataset/109/wine", sep = ",")
# Header row is not available in the data, therefore, we need to add the variable names
head(wine_data)
# Header row is not available in the data, therefore, we need to add the variable names
View(wine_data)
glm.fit <- glm(mpg~horsepower, data=Auto) # we have not used the "family" argument here.
coef(glm.fit)
# We can perform linear regression using the glm() function rather than the lm() fuction
# because the former can be used together with cv.glm() function.
# cv.glm() function is part of the boot library. Make sure to install the boot library first.
library(boot)
glm.fit <- glm(mpg~horsepower, data=Auto) # we have not used the "family" argument here.
# There are 13 variables in the dataset such as Alcohol, Malic Acid, Ash, Alkalinity of Ash, Magnesium, ...
wine_data <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/wine/wine.data", sep = ",")
# Header row is not available in the data, therefore, we need to add the variable names
head(wine_data)
# The first variable, which is the cultivar that is used to identify the Cv1, Cv2 and Cv3
# Cv1 represent the cultivar1, Cv2 represent the cultivar2 and Cv3 represent the cultivar3,
nrow(wine_data) # there are 178 rows
# Adding the variable names
colnames(wine_data) <- c("Cvs", "Alcohol",
"Malic_Acid", "Ash", "Alkalinity_of_Ash",
"Magnesium", "Total_Phenols", "Flavanoids", "NonFlavanoid_Phenols",
"Proanthocyanins", "Color_Intensity", "Hue", "OD280/OD315_of_Diluted_Wine",
"Proline")
head(wine_data) # Now you can see the header names.
# Using the Heatmap() function, we can check the correlations,
# In the heatmap(), the "Dark Colors" represent the "Correlated"
# In the heatmap(), the "Light Colors" represent the "Not or less Correlated"
help("heatmap") # Read the heatmap() function Documentation in RStudio.
# Now we will use the heatmap() function to show the correlation among variables.
heatmap(cor(wine_data),Rowv = NA, Colv = NA)
# Our goal is to identify the 3 variates based on the chemical data on the wine dataset.
# In order to make it easy identify the 3 cultivars, we will declare 3 classes that represents
# each cultivar (Cv1,Cv2,Cv3) by using the factor() function in R
# Read the documentation in Rstudio for the factor() function.
help(factor)
# declaring the cultivar_classes using the factor() function each cultivar Cv1,Cv2 and Cv3.
cultivar_classes <- factor(wine_data$Cvs)
cultivar_classes
# We will normalize the wine data to a common scale using scale() function so that the PCA process will not
# overweight variables that happen to have the larger values.
# Read the documentation of scale() function in RStudio.
help(scale)
# We will not normalize the Cvs variable (first colume) so we exclude the Cvs column with with -1
wine_data_PCA <- prcomp(scale(wine_data[,-1]))
# We can use the summary() function on wine_data_PCA to see the cumulative proportion that each
# principal component (PC) contributes,
summary(wine_data_PCA)
